// Generated by CoffeeScript 1.3.3
(function() {

  ko.bindingHandlers.dblclick = {
    init: function(element, value_accessor) {
      return $(element).dblclick(ko.utils.unwrapObservable(value_accessor()));
    }
  };

  ko.bindingHandlers.block = {
    update: function(element, value_accessor) {
      return element.style.display = ko.utils.unwrapObservable(value_accessor()) ? 'block' : 'none';
    }
  };

  ko.bindingHandlers.selectAndFocus = {
    init: function(element, value_accessor, all_bindings_accessor) {
      ko.bindingHandlers.hasfocus.init(element, value_accessor, all_bindings_accessor);
      return ko.utils.registerEventHandler(element, 'focus', function() {
        return element.select();
      });
    },
    update: function(element, value_accessor) {
      ko.utils.unwrapObservable(value_accessor());
      return _.defer(function() {
        return ko.bindingHandlers.hasfocus.update(element, value_accessor);
      });
    }
  };

  ko.bindingHandlers.placeholder = {
    update: function(element, value_accessor, all_bindings_accessor, view_model) {
      return $(element).attr('placeholder', ko.utils.unwrapObservable(value_accessor()));
    }
  };

  view_model.sort_mode = ko.computed(function() {
    var new_mode;
    new_mode = app.settings.selected_list_sorting();
    switch (new_mode) {
      case 'label_title':
        return view_model.todos.sortAttribute('title');
      case 'label_created':
        return view_model.todos.sortedIndex(function(models, model) {
          return _.sortedIndex(models, model, function(test) {
            return kb.utils.wrappedModel(test).get('created_at').valueOf();
          });
        });
      case 'label_priority':
        return view_model.todos.sortedIndex(function(models, model) {
          var _this = this;
          return _.sortedIndex(models, model, function(test) {
            return app.settings.priorityToRank(kb.utils.wrappedModel(test).get('priority'));
          });
        });
    }
  });

  view_model.remaining_text_key = ko.computed(function() {
    if (app.collections.todos.remainingCount() === 1) {
      return 'remaining_template_s';
    } else {
      return 'remaining_template_pl';
    }
  });

  view_model.remaining_text = kb.observable(kb.locale_manager, {
    key: view_model.remaining_text_key,
    args: function() {
      return view_model.todos.collection().remainingCount();
    }
  });

  view_model.clear_text_key = ko.computed(function() {
    if (view_model.todos.collection().completedCount() === 0) {
      return null;
    } else {
      if (todos.completedCount() === 1) {
        return 'clear_template_s';
      } else {
        return 'clear_template_pl';
      }
    }
  });

  view_model.clear_text = kb.observable(kb.locale_manager, {
    key: view_model.clear_text_key,
    args: function() {
      return view_model.todos.collection().completedCount();
    }
  });

  view_model.instructions_text = kb.observable(kb.locale_manager, {
    key: 'instructions'
  });

  _.delay((function() {
    app.collections.priorities.fetch({
      success: function(collection) {
        if (!collection.get('high')) {
          collection.create({
            id: 'high',
            color: '#bf30ff'
          });
        }
        if (!collection.get('medium')) {
          collection.create({
            id: 'medium',
            color: '#98acff'
          });
        }
        if (!collection.get('low')) {
          return collection.create({
            id: 'low',
            color: '#38ff6a'
          });
        }
      }
    });
    $('.colorpicker').mColorPicker({
      imageFolder: $.fn.mColorPicker.init.imageFolder
    });
    return $('.colorpicker').bind('colorpicked', function() {
      var model;
      model = app.collections.priorities.get($(this).attr('id'));
      if (model) {
        return model.save({
          color: $(this).val()
        });
      }
    });
  }), 1000);

}).call(this);
